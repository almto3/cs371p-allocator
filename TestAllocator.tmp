==505== Memcheck, a memory error detector
==505== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==505== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==505== Command: ./TestAllocator
==505== 
Running main() from gtest_main.cc
[==========] Running 15 tests from 8 test cases.
[----------] Global test environment set-up.
[----------] 2 tests from TestAllocator1/0, where TypeParam = std::allocator<int>
[ RUN      ] TestAllocator1/0.test_1
[       OK ] TestAllocator1/0.test_1 (8 ms)
[ RUN      ] TestAllocator1/0.test_10
[       OK ] TestAllocator1/0.test_10 (3 ms)
[----------] 2 tests from TestAllocator1/0 (17 ms total)

[----------] 2 tests from TestAllocator1/1, where TypeParam = std::allocator<double>
[ RUN      ] TestAllocator1/1.test_1
[       OK ] TestAllocator1/1.test_1 (4 ms)
[ RUN      ] TestAllocator1/1.test_10
[       OK ] TestAllocator1/1.test_10 (3 ms)
[----------] 2 tests from TestAllocator1/1 (7 ms total)

[----------] 2 tests from TestAllocator1/2, where TypeParam = Allocator<int, 100ul>
[ RUN      ] TestAllocator1/2.test_1
Printing s1: 92
Printing i: 92
Printing j: 92
A: sen1 = 0, sen2 = 0
i = 0, N = 100
B: sen1 = 92 at i = 0	sen2 = 92 at i = 96
i = 100, N = 100

valid() returning true with i = 100, N = 100


not a perfect fit
sen 1 = 18446744073709551612 at i = 0
sen 2 = 18446744073709551612 at i = 8
sen 3 = 80 at i = 12
sen 4 = 80 at i = 96
A: sen1 = 0, sen2 = 0
i = 0, N = 100
B: sen1 = -4 at i = 0	sen2 = -4 at i = 8
i = 12, N = 100

A: sen1 = -4, sen2 = -4
i = 12, N = 100
B: sen1 = 80 at i = 12	sen2 = 80 at i = 96
i = 100, N = 100

valid() returning true with i = 100, N = 100


A: sen1 = 0, sen2 = 0
i = 0, N = 100
B: sen1 = -4 at i = 0	sen2 = -4 at i = 8
i = 12, N = 100

A: sen1 = -4, sen2 = -4
i = 12, N = 100
B: sen1 = 80 at i = 12	sen2 = 80 at i = 96
i = 100, N = 100

valid() returning true with i = 100, N = 100


A: sen1 = 0, sen2 = 0
i = 0, N = 100
B: sen1 = -4 at i = 0	sen2 = -4 at i = 8
i = 12, N = 100

A: sen1 = -4, sen2 = -4
i = 12, N = 100
B: sen1 = 80 at i = 12	sen2 = 80 at i = 96
i = 100, N = 100

valid() returning true with i = 100, N = 100


A: sen1 = 0, sen2 = 0
i = 0, N = 100
B: sen1 = 92 at i = 0	sen2 = 80 at i = 96
i = 100, N = 100

valid() returning false because 
sen1 = 92, sen2 = 80
i = 100, N = 100
TestAllocator: Allocator.h:375: void Allocator<T, N>::deallocate(Allocator<T, N>::pointer, Allocator<T, N>::size_type) [with T = int; long unsigned int N = 100ul; Allocator<T, N>::pointer = int*; Allocator<T, N>::value_type = int; Allocator<T, N>::size_type = long unsigned int]: Assertion `valid()' failed.
==505== 
==505== HEAP SUMMARY:
==505==     in use at exit: 8,253 bytes in 145 blocks
==505==   total heap usage: 574 allocs, 429 frees, 73,285 bytes allocated
==505== 
==505== LEAK SUMMARY:
==505==    definitely lost: 0 bytes in 0 blocks
==505==    indirectly lost: 0 bytes in 0 blocks
==505==      possibly lost: 2,521 bytes in 62 blocks
==505==    still reachable: 5,732 bytes in 83 blocks
==505==         suppressed: 0 bytes in 0 blocks
==505== Rerun with --leak-check=full to see details of leaked memory
==505== 
==505== For counts of detected and suppressed errors, rerun with: -v
==505== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Aborted (core dumped)
